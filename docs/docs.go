// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Manaka Anthony Raphasha",
            "email": "anthonyraphasha@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/cloud/dns": {
            "post": {
                "description": "Detects dangling CNAMEs or unresolvable subdomains",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cloud"
                ],
                "summary": "Scan cloud subdomains for misconfigurations",
                "parameters": [
                    {
                        "description": "DNS Scan Input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.DNSCloudRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/cloud.DNSCheckResult"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/cloud/iam": {
            "post": {
                "description": "Detects overly permissive IAM policies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cloud"
                ],
                "summary": "Audit AWS IAM users and attached policies",
                "parameters": [
                    {
                        "description": "IAM Profile Input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.IAMRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/cloud.IAMFinding"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/cloud/s3": {
            "post": {
                "description": "Checks ACLs and Public Access Block on given bucket",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cloud"
                ],
                "summary": "Audit S3 bucket for public exposure",
                "parameters": [
                    {
                        "description": "S3 Audit Request",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.S3AuditRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cloud.S3AuditResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/email/analyze": {
            "post": {
                "description": "Checks email security configs for a domain",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Email"
                ],
                "summary": "Analyze SPF/DKIM/DMARC records",
                "parameters": [
                    {
                        "description": "Domain to analyze",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.EmailAnalyzeInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/email.EmailAnalysis"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/email/attack": {
            "post": {
                "description": "Sends an email using fake \"From\" field (Maildev/Mailhog only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Email"
                ],
                "summary": "Send spoofed test email",
                "parameters": [
                    {
                        "description": "Spoofed Email Data",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.EmailAttackInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/scan/port": {
            "post": {
                "description": "Performs a basic port scan (1-1024)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Scanner"
                ],
                "summary": "Scan open TCP ports on a host",
                "parameters": [
                    {
                        "description": "Target Host Input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ScanRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "cloud.DNSCheckResult": {
            "type": "object",
            "properties": {
                "cname": {
                    "type": "string"
                },
                "dangling": {
                    "type": "boolean"
                },
                "error": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "subdomain": {
                    "type": "string"
                }
            }
        },
        "cloud.IAMFinding": {
            "type": "object",
            "properties": {
                "issues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "policy_name": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "cloud.S3AuditResult": {
            "type": "object",
            "properties": {
                "acl_grants_exist": {
                    "type": "boolean"
                },
                "bucket": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "public_access": {
                    "type": "boolean"
                }
            }
        },
        "email.EmailAnalysis": {
            "type": "object",
            "properties": {
                "dkim": {
                    "type": "string"
                },
                "dmarc": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "spf": {
                    "type": "string"
                }
            }
        },
        "handlers.DNSCloudRequest": {
            "type": "object",
            "properties": {
                "domain": {
                    "type": "string"
                },
                "subdomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "handlers.EmailAnalyzeInput": {
            "type": "object",
            "properties": {
                "domain": {
                    "type": "string"
                }
            }
        },
        "handlers.EmailAttackInput": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "from": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            }
        },
        "handlers.IAMRequest": {
            "type": "object",
            "properties": {
                "profile": {
                    "type": "string"
                }
            }
        },
        "handlers.S3AuditRequest": {
            "type": "object",
            "properties": {
                "bucket": {
                    "type": "string"
                },
                "profile": {
                    "type": "string"
                }
            }
        },
        "handlers.ScanRequest": {
            "type": "object",
            "properties": {
                "target": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8181",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "GoSecOps API",
	Description:      "REST API for Penetration Testing & Cloud Security Tools",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
